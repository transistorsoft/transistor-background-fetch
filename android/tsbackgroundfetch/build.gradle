apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

afterEvaluate {
    publishing {
        publications {
            tsbackgroundfetch(MavenPublication) {
                println("[tsbackgroundfetch] publication")
                groupId 'com.transistorsoft'
                artifactId 'tsbackgroundfetch'
                version VERSION_NAME
                artifact("$buildDir/outputs/aar/tsbackgroundfetch-release.aar")

            }
        }
        repositories {
            maven {
                name = "tsbackgroundfetch"
                url "$buildDir/repo"
            }
        }
    }
}

android {
    namespace "com.transistorsoft.tsbackgroundfetch"
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion rootProject.targetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.6.2'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.lifecycle:lifecycle-runtime:2.8.5"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    //implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"

}

// Important with Gradle 8 to have Maven publish run assembleRelease
tasks.withType(PublishToMavenRepository) { task ->
    dependsOn("assembleRelease")
}

// Build Release
task buildRelease { task ->
    println("[tsbackgroundfetch] buildRelease")
    task.dependsOn 'cordovaRelease'
    task.dependsOn 'reactNativeRelease'
    //task.dependsOn 'nativeScriptRelease'
    task.dependsOn 'flutterRelease'
    task.dependsOn 'capacitorRelease'
}


// Publish Release.
task publishRelease { task ->
    println("[tsbackgroundfetch] publishRelease")
}

tasks["publish"].mustRunAfter("publishRelease")

def WORKSPACE_PATH = "/Users/chris/workspace"

// Build local maven repo.
def LIBRARY_PATH = "com/transistorsoft/tsbackgroundfetch"
task buildLocalRepository { task ->
    println("[tsbackgroundfetch] buildLocalRepository")
    task.dependsOn 'publish'
    doLast {
        delete "$buildDir/repo-local"
        copy {
            from "$buildDir/repo/$LIBRARY_PATH/$VERSION_NAME"
            into "$buildDir/repo-local/$LIBRARY_PATH/$VERSION_NAME"
        }
        copy {
            from("$buildDir/repo/$LIBRARY_PATH/maven-metadata.xml")
            into("$buildDir/repo-local/$LIBRARY_PATH")
        }
    }
}

def cordovaDir = "$WORKSPACE_PATH/background-geolocation/cordova/cordova-plugin-background-fetch"
task cordovaRelease { task ->
    task.dependsOn 'buildLocalRepository'
    doLast {
        println("OK")
        delete "$cordovaDir/src/android/libs"
        copy {
            // Maven repo format.
            from("$buildDir/repo-local")
            into("$cordovaDir/src/android/libs")
        }
    }
}

def reactNativeDir = "$WORKSPACE_PATH/background-geolocation/react/react-native-background-fetch"
task reactNativeRelease { task ->
    task.dependsOn 'buildLocalRepository'
    doLast {
        println("OK")
        delete "$reactNativeDir/android/libs"
        copy {
            // Maven repo format.
            from("$buildDir/repo-local")
            into("$reactNativeDir/android/libs")
        }
    }
}

def flutterDir = "$WORKSPACE_PATH/background-geolocation/flutter/flutter_background_fetch"
task flutterRelease { task ->
    task.dependsOn 'buildLocalRepository'
    doLast {
        println("OK")
        delete "$flutterDir/android/libs"
        copy {
            // Maven repo format.
            from("$buildDir/repo-local")
            into("$flutterDir/android/libs")
        }
    }
}

def capacitorDir = "$WORKSPACE_PATH/background-geolocation/capacitor/capacitor-background-fetch"
task capacitorRelease { task ->
    task.dependsOn 'buildLocalRepository'
    doLast {
        println("OK")
        delete "$capacitorDir/android/libs"
        copy {
            // Maven repo format.
            from("$buildDir/repo-local")
            into("$capacitorDir/android/libs")
        }
    }
}

task nativeScriptRelease(type: Copy) {
    from('./build/outputs/aar/tsbackgroundfetch-release.aar')
    into("$WORKSPACE_PATH/NativeScript/background-geolocation/nativescript-background-fetch/src/platforms/android/libs")
    rename('tsbackgroundfetch-release.aar', 'tsbackgroundfetch.aar')
}
